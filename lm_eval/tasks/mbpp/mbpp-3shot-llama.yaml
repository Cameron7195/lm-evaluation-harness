dataset_name: full
dataset_path: google-research-datasets/mbpp
doc_to_target: |
  {{ target if target is defined else test_list | join('\n') }}
doc_to_text: |
  You are an expert Python programmer, and here is your task:
  {{ text }}
  Your code should pass the following tests:
  {{ test_list | join('\n') }}
doc_to_gen_prefix: "```python"
fewshot_config:
  sampler: first_n
  samples:
  - text: Write a function to find the similar elements from the given two tuple lists.
    target: |
      ```python
      def similar_elements(test_tup1, test_tup2):
          res = tuple(set(test_tup1) & set(test_tup2))
          return (res)
      ```
    test_list:
    - assert similar_elements((3, 4, 5, 6), (5, 7, 4, 10)) == (4, 5)
    - assert similar_elements((1, 2, 3, 4), (5, 4, 3, 7)) == (3, 4)
    - assert similar_elements((11, 12, 14, 13), (17, 15, 14, 13)) == (13, 14)
  - text: Write a python function to identify non-prime numbers.
    target: |
      ```python
      import math
      def is_not_prime(n):
          result = False
          for i in range(2, int(math.sqrt(n)) + 1):
              if n % i == 0:
                  result = True
          return result
      ```
    test_list:
    - assert is_not_prime(2) == False
    - assert is_not_prime(10) == True
    - assert is_not_prime(35) == True
  - text: Write a function to find the largest integers from a given list of numbers using heap queue algorithm.
    target: |
      ```python
      import heapq as hq
      def heap_queue_largest(nums, n):
          largest_nums = hq.nlargest(n, nums)
          return largest_nums
      ```
    test_list:
    - assert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65] 
    - assert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 2) == [85, 75] 
    - assert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5) == [85, 75, 65, 58, 35]
generation_kwargs:
  do_sample: false
  until:
  - '<|eot_id|>'
  - '<|start_header_id|>user<|end_header_id|>'
tag:
- mbpp
metadata:
  version: 1.0
metric_list:
- aggregation: mean
  higher_is_better: true
  metric: compiles@1
- aggregation: mean
  higher_is_better: true
  timeout: 2.0
  metric: pass@1
num_fewshot: 3
output_type: generate_until
repeats: 1
task: mbpp_3shot_llama
test_split: test